# Joints limits
#
# Sources:
#
#  - Support > Articles > UR articles > Max. joint torques
#    https://www.universal-robots.com/articles/ur-articles/max-joint-torques
#    retrieved: 2020-06-16, last modified: 2020-06-09
#
# Custom configuration of the joint limits. Original file is located in universal_robot/ur_describtion/config/ur10e/joint_limits.yaml
#
joint_limits:
  shoulder_pan:
    # acceleration limits are not publicly available
    has_acceleration_limits: false
    has_effort_limits: true
    has_position_limits: true
    has_velocity_limits: true
    max_effort: 330.0
    max_position: !degrees  180.0
    max_velocity: !degrees  180.0
    min_position: !degrees -180.0
  shoulder_lift:
    # acceleration limits are not publicly available
    has_acceleration_limits: false
    has_effort_limits: true
    has_position_limits: true
    has_velocity_limits: true
    max_effort: 330.0
    # Reachable joint angles are limited by the environment structure to
    # roughly [-222.4, ..., 0.0] for the shoulder_lift_joint. It's important
    # to restrict the joint angles to less than the full 720 degrees, otherwise
    # the planning space is discontinuous (also see comment for elbow_joint).
    #
    # Reasons for position limits:
    # * shoulder_lift.min_position=-pi and elbow_joint.min_position=0:
    #   The combination of these two limits ensures that there are no IK solutions
    #   which require full arm reconfigurations during picking from table height.
    #   These IK solutions would lead to undesirable "overhead" trajectories and also
    #   mess up the path simplification (planner produces a feasible plan, but path
    #   "simplification" introduces jumps from one configuration to the opposite one).
    # * shoulder_lift.max_position=0.74: all values > 0.74 are in self collision
    #   (this limit is just an optimization)
    max_position: !degrees    0.0 # = 0.0, default:  360.0
    max_velocity: !degrees  180.0
    min_position: !degrees -180.0 # = -pi,  default: -360.0
  elbow_joint:
    # acceleration limits are not publicly available
    has_acceleration_limits: false
    has_effort_limits: true
    has_position_limits: true
    has_velocity_limits: true
    max_effort: 150.0
    # we artificially limit this joint to half its actual joint position limit
    # to avoid (MoveIt/OMPL) planning problems, as due to the physical
    # construction of the robot, it's impossible to rotate the 'elbow_joint'
    # over more than approx +- 1 pi (the shoulder lift joint gets in the way).
    #
    # This leads to planning problems as the search space will be divided into
    # two sections, with no connections from one to the other.
    #
    # Refer to https://github.com/ros-industrial/universal_robot/issues/265 for
    # more information.
    #
    # Reasons for additional position limits:
    # * elbow_joint.min_position=0: see comment for shoulder_lift
    # * elbow_joint.max_position=2.93: all values > 2.93 are in self collision
    max_position: !degrees    0.0 # =2.93, default:  180.0
    max_velocity: !degrees  180.0
    min_position: !degrees -180.0 # = 0.0, default: -180.0
  wrist_1:
    # acceleration limits are not publicly available
    has_acceleration_limits: false
    has_effort_limits: true
    has_position_limits: true
    has_velocity_limits: true
    max_effort: 56.0
    max_position: !degrees  180.0
    max_velocity: !degrees  180.0
    min_position: !degrees -180.0
  wrist_2:
    # acceleration limits are not publicly available
    has_acceleration_limits: false
    has_effort_limits: true
    has_position_limits: true
    has_velocity_limits: true
    max_effort: 56.0
    max_position: !degrees  180.0
    max_velocity: !degrees  180.0
    min_position: !degrees -180.0
  wrist_3:
    # acceleration limits are not publicly available
    has_acceleration_limits: false
    has_effort_limits: true
    has_position_limits: true
    has_velocity_limits: true
    max_effort: 56.0
    max_position: !degrees  315.0  # = 1.75 * pi
    max_velocity: !degrees  180.0
    min_position: !degrees  -45.0  # = -0.25 * pi
